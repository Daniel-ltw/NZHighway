package info.technikality.nzhighway.LRMS;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.0.1.0
//
// Created by Quasar Development at 30-08-2014
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class LQJlocateMultiple extends AttributeContainer implements KvmSerializable
{
    
    public String sh;
    
    public Integer rs=0;
    
    public String direction;
    
    public ArrayList< Double>displacements =new ArrayList<Double>();
    
    public Integer srid=0;

    public LQJlocateMultiple ()
    {
    }

    public LQJlocateMultiple (java.lang.Object paramObj,LQJExtendedSoapSerializationEnvelope envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        SoapObject soapObject=(SoapObject)inObj;  
        if (soapObject.hasProperty("sh"))
        {	
	        java.lang.Object obj = soapObject.getProperty("sh");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.sh = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.sh = (String)obj;
            }    
        }
        if (soapObject.hasProperty("rs"))
        {	
	        java.lang.Object obj = soapObject.getProperty("rs");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.rs = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.rs = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("direction"))
        {	
	        java.lang.Object obj = soapObject.getProperty("direction");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.direction = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.direction = (String)obj;
            }    
        }
        if (soapObject.hasProperty("displacements"))
        {	
	        int size = soapObject.getPropertyCount();
	        this.displacements = new ArrayList<Double>();
	        for (int i0=0;i0< size;i0++)
	        {
	            PropertyInfo info=new PropertyInfo();
	            soapObject.getPropertyInfo(i0, info);
                java.lang.Object obj = info.getValue();
	            if (obj!=null && info.name.equals("displacements"))
	            {
                    java.lang.Object j =info.getValue();
	                Double j1= new Double(j.toString());
	                this.displacements.add(j1);
	            }
	        }
        }
        if (soapObject.hasProperty("srid"))
        {	
	        java.lang.Object obj = soapObject.getProperty("srid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.srid = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.srid = (Integer)obj;
            }    
        }


    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return sh!=null?sh:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==1)
        {
            return rs;
        }
        if(propertyIndex==2)
        {
            return direction!=null?direction:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==3)
        {
            return srid;
        }
        if(propertyIndex>=+4 && propertyIndex< + 4+this.displacements.size())
        {
            return displacements.get(propertyIndex-(+4));
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 4+displacements.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "sh";
            info.namespace= "";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "rs";
            info.namespace= "";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "direction";
            info.namespace= "";
        }
        if(propertyIndex==3)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "srid";
            info.namespace= "";
        }
        if(propertyIndex>=+4 && propertyIndex <= +4+this.displacements.size())
        {
            info.type = Double.class;
            info.name = "displacements";
            info.namespace= "";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

}
