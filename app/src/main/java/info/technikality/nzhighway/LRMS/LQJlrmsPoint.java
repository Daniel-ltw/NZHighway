package info.technikality.nzhighway.LRMS;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.0.1.0
//
// Created by Quasar Development at 30-08-2014
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class LQJlrmsPoint extends AttributeContainer implements KvmSerializable
{
    
    public Double displacementMetres=0d;
    
    public String linearReference;
    
    public String roadElementId;
    
    public Double x=0d;
    
    public Double y=0d;

    public LQJlrmsPoint ()
    {
    }

    public LQJlrmsPoint (java.lang.Object paramObj,LQJExtendedSoapSerializationEnvelope envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        SoapObject soapObject=(SoapObject)inObj;  
        if (soapObject.hasProperty("displacementMetres"))
        {	
	        java.lang.Object obj = soapObject.getProperty("displacementMetres");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.displacementMetres = new Double(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Double){
                this.displacementMetres = (Double)obj;
            }    
        }
        if (soapObject.hasProperty("linearReference"))
        {	
	        java.lang.Object obj = soapObject.getProperty("linearReference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.linearReference = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.linearReference = (String)obj;
            }    
        }
        if (soapObject.hasProperty("roadElementId"))
        {	
	        java.lang.Object obj = soapObject.getProperty("roadElementId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.roadElementId = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.roadElementId = (String)obj;
            }    
        }
        if (soapObject.hasProperty("x"))
        {	
	        java.lang.Object obj = soapObject.getProperty("x");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.x = new Double(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Double){
                this.x = (Double)obj;
            }    
        }
        if (soapObject.hasProperty("y"))
        {	
	        java.lang.Object obj = soapObject.getProperty("y");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.y = new Double(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Double){
                this.y = (Double)obj;
            }    
        }


    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return displacementMetres;
        }
        if(propertyIndex==1)
        {
            return linearReference!=null?linearReference:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==2)
        {
            return roadElementId!=null?roadElementId:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==3)
        {
            return x;
        }
        if(propertyIndex==4)
        {
            return y;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 5;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = Double.class;
            info.name = "displacementMetres";
            info.namespace= "";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "linearReference";
            info.namespace= "";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "roadElementId";
            info.namespace= "";
        }
        if(propertyIndex==3)
        {
            info.type = Double.class;
            info.name = "x";
            info.namespace= "";
        }
        if(propertyIndex==4)
        {
            info.type = Double.class;
            info.name = "y";
            info.namespace= "";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

}
